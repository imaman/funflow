var u_ = require('underscore');
var newFlow = require('../lib/compilation').newFlow;
var compile = require('../lib/compilation').compile;

describe('Execution', function() {
  it('reports the IDs of all computation nodes', function() {
    var flow = newFlow('A', 'B', 'C');
    var execution = flow(null, function() {});
    expect(execution.ids()).toEqual([0, 1, 2]);
  });
  describe('after the fact inspection', function() {
    it('it records the output generated by each vertex', function() {
      var flow = newFlow(
        function(v, next) { next(null, v +'A') },
        function(v, next) { next(null, v +'B') },
        function(v, next) { next(null, v +'C') });
      var execution = flow(null, '_', function() {});
      expect(execution.outputOf(0)).toEqual([null, '_A']);
      expect(execution.outputOf(1)).toEqual([null, '_AB']);
      expect(execution.outputOf(2)).toEqual([null, '_ABC']);
    });
  });
  describe('textual representation', function() {
    it('contains diagram and outputs after evaluation', function() {
      var flow = compile(
        function fa(v, next) { next(null, v +'A') },
        {
          b1: function fb1(v, next) { next(null, v +'B1') },
          b2: function(v, next) { next(null, v +'B2') },
        },
        function fc(v, next) { next(null, v.b1 + '_' + v.b2) }
      );
      var execution = flow.newExecution();
      execution.run(null, '*', function() {});
      expect(execution.toString()).toEqual(['',
        '|',
        'fa#0',
        '|',
        '|',
        '+->--+-----+',
        '     |     |',
        '     fb1#2 #3',
        '     |     |',
        '     |     |',
        '+-<--+-----+',
        'fc#5',
        '|',
        'Outputs:',
        '  - 0 => [null,"*A"]',
        '  - 1 => [null,"*A"]',
        '  - 2 => [null,"*AB1"]',
        '  - 3 => [null,"*AB2"]',
        '  - 4 => [null,{"b1":"*AB1","b2":"*AB2"}]',
        '  - 5 => [null,"*AB1_*AB2"]',
      ].join('\n'));
    });
    it('contains no outputs before the flow runs', function() {
      var flow = compile(
        function fa(v, next) {},
        function fb(v, next) {}
      );
      var execution = flow.newExecution();
      expect(execution.toString()).toEqual(['',
        '|',
        'fa#0',
        '|',
        'fb#1',
        '|'
      ].join('\n'));
    });
    describe('after a failure', function() {
      it('capures the current state at the Exception', function() {
      var flow = compile(
        'A',
        function fb(v, next) { next(null, v + 'B') },
        function fc(v, next) { next('PROBLEM') },
        function fd(v, next) { next(null, v + 'D') },
        function fe(v, next) { next(null, v + 'E') }
      );
      var execution = flow.newExecution({translateErrors: true});
      var args;
      execution.run(null, function() {
        args = u_.toArray(arguments);
      });
      expect(args.length).toBe(1);
      expect(args[0].flowTrace).toEqual(['',
        '|',
        'A#0',
        '|',
        'fb#1',
        '|',
        'fc#2',
        '|',
        'fd#3',
        '|',
        'fe#4',
        '|',
        'Outputs:',
        '  - 0 => [null,"A"]',
        '  - 1 => [null,"AB"]',
        '  - 2 => ["PROBLEM"]',
      ].join('\n'));
      });
    });
  });
});

// TODO
// lookup by name
// finalize
