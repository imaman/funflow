var newFlow = require('../lib/compilation').newFlow;
var compile = require('../lib/compilation').compile;

describe('Execution', function() {
  it('reports the IDs of all computation nodes', function() {
    var flow = newFlow('A', 'B', 'C');
    var execution = flow(null, function() {});
    expect(execution.ids()).toEqual([0, 1, 2]);
  });
  describe('after the fact inspection', function() {
    it('it records the output generated by each vertex', function() {
    var flow = newFlow(
      function(v, next) { next(null, v +'A') },
      function(v, next) { next(null, v +'B') },
      function(v, next) { next(null, v +'C') });
    var execution = flow(null, '_', function() {});
    expect(execution.outputOf(0)).toEqual([null, '_A']);
    expect(execution.outputOf(1)).toEqual([null, '_AB']);
    expect(execution.outputOf(2)).toEqual([null, '_ABC']);
  });
    it('returns a textual representation of the final state', function() {
      var flow = compile(
        function fa(v, next) { next(null, v +'A') },
        {
          b1: function fb1(v, next) { next(null, v +'B1') },
          b2: function(v, next) { next(null, v +'B1') },
        },
        function fc(v, next) { next(null, v.b1 + '_' + v.b2) }
      );
      var execution = flow.newExecution();
      execution.run(null, '*', function() {});
      expect(execution.inspectX()).toEqual(['',
        '|',
        'fa#0',
        '|',
        '|',
        '+->--+-----+',
        '     |     |',
        '     fb1#2 #3',
        '     |     |',
        '     |     |',
        '+-<--+-----+',
        'fc#5',
        '|',
        'Outputs:',
        '  - 0 => [null,"*A"]',
        '  - 1 => [null,"*A"]',
        '  - 2 => [null,"*AB1"]',
        '  - 3 => [null,"*AB1"]',
        '  - 4 => [null,{"b1":"*AB1","b2":"*AB1"}]',
        '  - 5 => [null,"*AB1_*AB1"]',
      ].join('\n'));
    });
  });
});
